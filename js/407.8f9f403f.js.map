{"version":3,"file":"js/407.8f9f403f.js","mappings":"oTAGO,MAAMA,EAAoBC,IACxBC,EAAAA,EAAAA,GAAQ,CACbC,IAAK,oBACLC,OAAQH,IAICI,EAAmBJ,IACvBC,EAAAA,EAAAA,GAAQ,CACbC,IAAK,4BACLG,OAAQ,OACRL,KAAAA,IAISM,EAAcC,IAClBN,EAAAA,EAAAA,GAAQ,CACbC,IAAM,uBAAsBK,MAInBC,EAAuB,KAC3BP,EAAAA,EAAAA,GAAQ,CACbC,IAAK,0BAIIO,EAAcF,IAClBN,EAAAA,EAAAA,GAAQ,CACbC,IAAM,uBAAsBK,MAInBG,EAAaH,IACjBN,EAAAA,EAAAA,GAAQ,CACbC,IAAM,qBAAoBK,MAIjBI,EAAa,CAACJ,EAAIK,KACtBX,EAAAA,EAAAA,GAAQ,CACbC,IAAM,4BAA2BK,IACjCF,OAAQ,OACRL,KAAM,CACJY,MAAAA,M,0FC/CC,MAAMC,EAAiB,CAC5BC,KAAI,WACJC,OAAM,SACNC,KAAI,OACJC,OAAM,YAKKC,EAAcC,IACzB,MAAMC,EAAO,IAAIC,KAAkB,IAAZF,EAAO,GAAU,KAAU,GAClDC,EAAKE,QAAQF,EAAKG,cAAgB,IAClC,MAAMC,EAAOJ,EAAKG,cAAgB,GAC5BE,EAAQL,EAAKM,WAAa,EAAI,GAC9BC,EAAOP,EAAKQ,UAAY,EAAI,GAClC,OACEJ,EACA,KACCC,EAAQ,GAAK,IAAMA,EAAQA,GAC5B,KACCE,EAAO,GAAK,IAAMA,EAAOA,I,kFChBvB,MAAME,EAAeC,IAC1B,MAAMC,EAAU,GACVC,EAAQC,IAAAA,MAAAA,aAAwBH,EAAM,SAC5C,IAAII,EACJ,MAAMC,EAAIH,EAAMI,EAAEC,EAElB,IAAKH,EAAIF,EAAMI,EAAEE,EAAGJ,GAAKF,EAAMO,EAAED,IAAKJ,EAAG,CAEvC,MAAMM,EAAOV,EAAMG,IAAAA,MAAAA,YAAuB,CAAEK,EAAGJ,EAAGG,EAAGF,KAErD,IAAIM,EAAM,WAAaP,EACnBM,GAAQA,EAAKE,IAAGD,EAAMR,IAAAA,MAAAA,YAAuBO,IACjDT,EAAQY,KAAKF,GAEf,OAAOV,GAGIa,EAAUC,GACd,oBAAoBC,KAAKD,EAAKE,M,kRCmBjCC,GAAUC,EAAAA,EAAAA,KAAI,GACdC,GAAmBD,EAAAA,EAAAA,IAAI,MACvBE,EAAe,KACnBD,EAAiBE,MAAMC,SAEnBC,EAAgBf,IACpB,MAAMgB,EAAQhB,EAAEiB,OAAOD,MACjBE,EAAUF,EAAM,GACjBE,GACLC,EAAOD,IAGHE,EAAapB,IAEjB,GAAIS,EAAQI,MAAO,OACnB,MAAMG,EAAQhB,EAAEqB,aAAaL,MAC7B,GAAqB,IAAjBA,EAAMM,OAER,YADAC,EAAAA,GAAAA,MAAgB,YAGlB,MAAML,EAAUF,EAAM,GACtB,IAAKX,EAAQa,GAEX,OADAK,EAAAA,GAAAA,MAAgB,8BACT,EAGTJ,EAAOD,IAEHM,EAAkBxB,IACtBA,EAAEqB,aAAaI,WAAa,QAGxBN,EAASD,IAGb,GAFAP,EAAiBE,MAAMA,MAAQ,MAE1Ba,EAAMC,aAET,YADAC,EAAWV,GAIb,MAAMW,EAASH,EAAMC,aAAaT,GAC9BW,GACFD,EAAWV,IAITU,EAAaV,IACjBT,EAAQI,OAAQ,EACT,IAAIiB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WAEnBD,EAAOE,OAASnC,IAEd,MAAMvC,EAAOuC,EAAEiB,OAAOmB,OAEhBC,EAAW3C,IAAAA,KAAUjC,EAAM,CAAE6E,KAAM,UAEnCC,EAAiBF,EAASG,WAAW,GAErCC,EAAYJ,EAASK,OAAOH,GAE5BI,EAASrD,EAAamD,GAEtBG,EAAUlD,IAAAA,MAAAA,cAAyB+C,GAEzCI,EAAa,CACXF,OAAAA,EACAC,QAAAA,IAGFnC,EAAQI,OAAQ,EAEhBkB,KAGFE,EAAOa,kBAAkB5B,OAKvB2B,EAAeE,IACnBrB,EAAMsB,WAAatB,EAAMsB,UAAUD,I,+mBCpHrC,MAAME,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,Q,YCKA,MAAMC,GAAOC,EAAAA,EAAAA,MACPC,GAASC,EAAAA,EAAAA,MACTL,EAAYM,OAChBX,OAAAA,EACAC,QAAAA,MAEA,MAAMW,EAAaV,EAAaD,SAC1B/E,EAAAA,EAAAA,IAAgB0F,GACtBhC,EAAAA,GAAAA,QAAkB,CAChBiC,QAASZ,EAAQtB,OAAS4B,EAAK/C,EAAE,2BACjCmC,KAAM,kBAEFc,EAAOhD,KAAK,iBAIdyC,EAAeD,IACnB,MAAMa,EAAM,GAYZ,OAXAb,EAAQc,SAAQC,IACd,MAAMC,EAAW,GACjBC,OAAOC,KAAKH,GAAMD,SAAQK,IACI,aAAxBzF,EAAeyF,GAInBH,EAAStF,EAAeyF,IAAQJ,EAAKI,GAHnCH,EAAStF,EAAeyF,IAAQpF,EAAWgF,EAAKI,OAKpDN,EAAIrD,KAAKwD,MAEJH,G,gECvCT,MAAM,EAAc,EAEpB","sources":["webpack://imooc-admin/./src/api/user-manage.js","webpack://imooc-admin/./src/views/import/utils.js","webpack://imooc-admin/./src/components/UploadExcel/utils.js","webpack://imooc-admin/./src/components/UploadExcel/UploadExcel.vue","webpack://imooc-admin/./src/components/UploadExcel/UploadExcel.vue?0258","webpack://imooc-admin/./src/views/import/import-index.vue","webpack://imooc-admin/./src/views/import/import-index.vue?c98c"],"sourcesContent":["import request from '@/utils/request'\r\n\r\n// 获取用户列表数据\r\nexport const getUserManageList = data => {\r\n  return request({\r\n    url: '/user-manage/list',\r\n    params: data\r\n  })\r\n}\r\n// 批量上传\r\nexport const userBatchImport = (data) => {\r\n  return request({\r\n    url: '/user-manage/batch/import',\r\n    method: 'POST',\r\n    data\r\n  })\r\n}\r\n// 删除指定数据\r\nexport const deleteUser = (id) => {\r\n  return request({\r\n    url: `/user-manage/detele/${id}`\r\n  })\r\n}\r\n// 获取所有用户列表数据\r\nexport const getUserManageAllList = () => {\r\n  return request({\r\n    url: '/user-manage/all-list'\r\n  })\r\n}\r\n// 获取用户详情\r\nexport const userDetail = (id) => {\r\n  return request({\r\n    url: `/user-manage/detail/${id}`\r\n  })\r\n}\r\n// 获取指定用户角色\r\nexport const userRoles = (id) => {\r\n  return request({\r\n    url: `/user-manage/role/${id}`\r\n  })\r\n}\r\n// 分用户分配角色\r\nexport const updateRole = (id, roles) => {\r\n  return request({\r\n    url: `/user-manage/update-role/${id}`,\r\n    method: 'POST',\r\n    data: {\r\n      roles\r\n    }\r\n  })\r\n}\r\n","export const USER_RELATIONS = {\r\n  姓名: 'username',\r\n  联系方式: 'mobile',\r\n  角色: 'role',\r\n  开通时间: 'openTime'\r\n}\r\n/**\r\n * 解析 excel 导入的时间格式\r\n */\r\nexport const formatDate = (numb) => {\r\n  const time = new Date((numb - 1) * 24 * 3600000 + 1)\r\n  time.setYear(time.getFullYear() - 70)\r\n  const year = time.getFullYear() + ''\r\n  const month = time.getMonth() + 1 + ''\r\n  const date = time.getDate() - 1 + ''\r\n  return (\r\n    year +\r\n    '-' +\r\n    (month < 10 ? '0' + month : month) +\r\n    '-' +\r\n    (date < 10 ? '0' + date : date)\r\n  )\r\n}\r\n","import XLSX from 'xlsx'\r\n/**\r\n * 获取表头（通用方式）\r\n */\r\nexport const getHeaderRow = sheet => {\r\n  const headers = []\r\n  const range = XLSX.utils.decode_range(sheet['!ref'])\r\n  let C\r\n  const R = range.s.r\r\n  /* start in the first row */\r\n  for (C = range.s.c; C <= range.e.c; ++C) {\r\n    /* walk every column in the range */\r\n    const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n    /* find the cell in the first row */\r\n    let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n    if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n    headers.push(hdr)\r\n  }\r\n  return headers\r\n}\r\n\r\nexport const isExcel = file => {\r\n  return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n}\r\n","<template>\r\n  <div class=\"upload-excel\">\r\n    <div class=\"btn-upload\">\r\n      <el-button :loading=\"loading\" type=\"primary\" @click=\"handleUpload\">\r\n        {{ $t('msg.uploadExcel.upload') }}\r\n      </el-button>\r\n    </div>\r\n\r\n    <input\r\n      ref=\"excelUploadInput\"\r\n      class=\"excel-upload-input\"\r\n      type=\"file\"\r\n      accept=\".xlsx, .xls\"\r\n      @change=\"handleChange\"\r\n    />\r\n    <div\r\n      class=\"drop\"\r\n      @drop.stop.prevent=\"handLeDrop\"\r\n      @dragover.stop.prevent=\"handleDragover\"\r\n      @dragenter.stop.prevent=\"handleDragover\"\r\n    >\r\n      <i class=\"el-icon-upload\"/>\r\n      <span>{{ $t('msg.uploadExcel.drop') }}</span>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { defineProps, ref } from 'vue'\r\nimport XLSX from 'xlsx'\r\nimport { getHeaderRow, isExcel } from '@/components/UploadExcel/utils'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst props = defineProps({\r\n  // 上传之前的回调\r\n  beforeUpload: Function,\r\n  // 上传成功的回调\r\n  onSuccess: Function\r\n})\r\n\r\n// 点击上传触发\r\nconst loading = ref(false)\r\nconst excelUploadInput = ref(null)\r\nconst handleUpload = () => {\r\n  excelUploadInput.value.click()\r\n}\r\nconst handleChange = (e) => {\r\n  const files = e.target.files\r\n  const rawFile = files[0]\r\n  if (!rawFile) return\r\n  upload(rawFile)\r\n}\r\n// 拖拽上传\r\nconst handLeDrop = e => {\r\n  // 上传中\r\n  if (loading.value) return\r\n  const files = e.dataTransfer.files\r\n  if (files.length !== 1) {\r\n    ElMessage.error('必须要有一个文件')\r\n    return\r\n  }\r\n  const rawFile = files[0]\r\n  if (!isExcel(rawFile)) {\r\n    ElMessage.error('文件必须是 .xlsx, .xls, .csv格式')\r\n    return false\r\n  }\r\n  // 触发上传事件\r\n  upload(rawFile)\r\n}\r\nconst handleDragover = (e) => {\r\n  e.dataTransfer.dropEffect = 'copy'\r\n}\r\n// 触发上传事件\r\nconst upload = rawFile => {\r\n  excelUploadInput.value.value = null\r\n  // 如果没有指定上传钱的回调\r\n  if (!props.beforeUpload) {\r\n    readerData(rawFile)\r\n    return\r\n  }\r\n  // 如果指定了上传前的回调，那么只有返回 true 的时候，才会执行对应的后续操作\r\n  const before = props.beforeUpload(rawFile)\r\n  if (before) {\r\n    readerData(rawFile)\r\n  }\r\n}\r\n// 读取数据（异步）\r\nconst readerData = rawFile => {\r\n  loading.value = true\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader()\r\n    // 读取操作完成触发\r\n    reader.onload = e => {\r\n      // 1. 获取解析到的数据\r\n      const data = e.target.result\r\n      // 2. 利用 XLSX 对数据进行解析\r\n      const workbook = XLSX.read(data, { type: 'array' })\r\n      // 3. 获取第一张表格(工作簿)名称\r\n      const firstSheetName = workbook.SheetNames[0]\r\n      // 4. 只读取 Sheet1（第一张表格）的数据\r\n      const worksheet = workbook.Sheets[firstSheetName]\r\n      // 5. 解析数据表头\r\n      const header = getHeaderRow(worksheet)\r\n      // 6. 解析数据体\r\n      const results = XLSX.utils.sheet_to_json(worksheet)\r\n      // 7. 传入解析之后的数据\r\n      generateData({\r\n        header,\r\n        results\r\n      })\r\n      // 8. loading 处理\r\n      loading.value = false\r\n      // 9. 异步完成\r\n      resolve()\r\n    }\r\n    // 启动读取指定的 Blob 或 File 内容\r\n    reader.readAsArrayBuffer(rawFile)\r\n  })\r\n}\r\n// 根据导入内容，生成数据\r\n\r\nconst generateData = excelData => {\r\n  props.onSuccess && props.onSuccess(excelData)\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.upload-excel {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 100px;\r\n\r\n  .excel-upload-input {\r\n    display: none;\r\n    z-index: -9999;\r\n  }\r\n\r\n  .btn-upload,\r\n  .drop {\r\n    border: 1px dashed #bbb;\r\n    width: 350px;\r\n    height: 160px;\r\n    text-align: center;\r\n    line-height: 160px;\r\n  }\r\n\r\n  .drop {\r\n    line-height: 60px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    color: #bbb;\r\n\r\n    i {\r\n      font-size: 60px;\r\n      display: block;\r\n    }\r\n  }\r\n}\r\n</style>\r\n","import script from \"./UploadExcel.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./UploadExcel.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./UploadExcel.vue?vue&type=style&index=0&id=7ae793b2&lang=scss&scoped=true\"\n\nimport exportComponent from \"C:\\\\Users\\\\Duan\\\\Desktop\\\\imooc-admin\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-7ae793b2\"]])\n\nexport default __exports__","<template>\r\n  <upload-excel :onSuccess=\"onSuccess\"></upload-excel>\r\n</template>\r\n\r\n<script setup>\r\nimport { USER_RELATIONS, formatDate } from '@/views/import/utils'\r\nimport { userBatchImport } from '@/api/user-manage'\r\nimport { ElMessage } from 'element-plus'\r\nimport { useI18n } from 'vue-i18n'\r\nimport { useRouter } from 'vue-router'\r\nimport UploadExcel from '@/components/UploadExcel/UploadExcel'\r\n\r\n// 数据解析成功之后的回调\r\nconst i18n = useI18n()\r\nconst router = useRouter()\r\nconst onSuccess = async ({\r\n  header,\r\n  results\r\n}) => {\r\n  const updateData = generateData(results)\r\n  await userBatchImport(updateData)\r\n  ElMessage.success({\r\n    message: results.length + i18n.t('msg.excel.importSuccess'),\r\n    type: 'success'\r\n  })\r\n  await router.push('/user/manage')\r\n}\r\n\r\n// 筛选数据\r\nconst generateData = results => {\r\n  const arr = []\r\n  results.forEach(item => {\r\n    const userInfo = {}\r\n    Object.keys(item).forEach(key => {\r\n      if (USER_RELATIONS[key] === 'openTime') {\r\n        userInfo[USER_RELATIONS[key]] = formatDate(item[key])\r\n        return\r\n      }\r\n      userInfo[USER_RELATIONS[key]] = item[key]\r\n    })\r\n    arr.push(userInfo)\r\n  })\r\n  return arr\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped></style>\r\n","import script from \"./import-index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./import-index.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["getUserManageList","data","request","url","params","userBatchImport","method","deleteUser","id","getUserManageAllList","userDetail","userRoles","updateRole","roles","USER_RELATIONS","姓名","联系方式","角色","开通时间","formatDate","numb","time","Date","setYear","getFullYear","year","month","getMonth","date","getDate","getHeaderRow","sheet","headers","range","XLSX","C","R","s","r","c","e","cell","hdr","t","push","isExcel","file","test","name","loading","ref","excelUploadInput","handleUpload","value","click","handleChange","files","target","rawFile","upload","handLeDrop","dataTransfer","length","ElMessage","handleDragover","dropEffect","props","beforeUpload","readerData","before","Promise","resolve","reject","reader","FileReader","onload","result","workbook","type","firstSheetName","SheetNames","worksheet","Sheets","header","results","generateData","readAsArrayBuffer","excelData","onSuccess","__exports__","i18n","useI18n","router","useRouter","async","updateData","message","arr","forEach","item","userInfo","Object","keys","key"],"sourceRoot":""}